package handler

import (
	"encoding/json"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.uber.org/zap"
	"net/http"
	"task-bot/pkg/logger"
	"time"
)

func LoggingMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		log := logger.GetLogger()
		start := time.Now()
		next.ServeHTTP(w, r)
		log.Info("HTTP request",
			zap.String("method", r.Method),
			zap.String("url", r.URL.Path),
			zap.Duration("duration", time.Since(start)),
		)
	})
}

func WebHookHandler(bot *tgbotapi.BotAPI) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var update tgbotapi.Update
		if err := json.NewDecoder(r.Body).Decode(&update); err != nil {
			http.Error(w, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON", http.StatusBadRequest)
			return
		}

		if update.Message != nil {
			ProcessMessage(bot, update.Message)
		}
		if update.CallbackQuery != nil {
			ProcessCallbackQuery(bot, update.CallbackQuery)
		}
		w.WriteHeader(http.StatusOK)
	}
}

func ProcessMessage(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	log := logger.GetLogger()
	cmd := msg.Command()
	switch cmd {
	case "start":
		response := tgbotapi.NewMessage(msg.Chat.ID,
			"–ü—Ä–∏–≤–µ—Ç! üëã\n\n–Ø - —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—áü§ñ\n\n"+
				"–¢—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é\n\n"+
				"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
		response.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("start", "start"),
				tgbotapi.NewInlineKeyboardButtonData("help", "help"),
			),
		)
		_, err := bot.Send(response)
		if err != nil {
			log.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", zap.Error(err))
		}
	case "help":
		response := tgbotapi.NewMessage(msg.Chat.ID,
			"üìë –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
		_, err := bot.Send(response)
		if err != nil {
			log.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", zap.Error(err))
		}
	default:
		response := tgbotapi.NewMessage(msg.Chat.ID,
			"‚õî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —è –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å")
		_, err := bot.Send(response)
		if err != nil {
			log.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", zap.Error(err))
		}
	}

}

func ProcessCallbackQuery(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	log := logger.GetLogger()
	switch callback.Data {
	case "start":
		response := tgbotapi.NewMessage(callback.Message.Chat.ID,
			"–ü—Ä–∏–≤–µ—Ç!üëã –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á. –ü–æ–º–æ–≥—É –∑–∞–ø–æ–º–Ω–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –Ω–∞–ø–æ–º–Ω—é –æ –Ω–∏—Ö")
		_, err := bot.Send(response)
		if err != nil {
			log.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", zap.Error(err))
		}
	case "help":
		response := tgbotapi.NewMessage(callback.Message.Chat.ID,
			"–ü—Ä–∏–≤–µ—Ç! –ö–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ —è –∑–Ω–∞—é:")
		response.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("start", "start"),
				tgbotapi.NewInlineKeyboardButtonData("help", "help"),
			),
		)
		_, err := bot.Send(response)
		if err != nil {
			log.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", zap.Error(err))
		}
	}
}
