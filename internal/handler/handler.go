package handler

import (
	"encoding/json"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.uber.org/zap"
	"net/http"
	"task-bot/internal/db"
	"task-bot/pkg/logger"
	"time"
)

var log = logger.GetLogger()

type UserState struct {
	Step     string
	TempTask Task
}

type Task struct {
	Title       string
	Description string
	DueDate     time.Time
}

var userStates = make(map[int64]*UserState)

func LoggingMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		log := logger.GetLogger()
		start := time.Now()
		next.ServeHTTP(w, r)
		log.Info("HTTP request",
			zap.String("method", r.Method),
			zap.String("url", r.URL.Path),
			zap.Duration("duration", time.Since(start)),
		)
	})
}

func WebHookHandler(bot *tgbotapi.BotAPI) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var update tgbotapi.Update
		if err := json.NewDecoder(r.Body).Decode(&update); err != nil {
			http.Error(w, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON", http.StatusBadRequest)
			return
		}

		if update.Message == nil && update.CallbackQuery == nil {
			http.Error(w, "–ü—É—Å—Ç–æ–π update", http.StatusBadRequest)
			return
		}

		var userID int64
		if update.Message != nil {
			userID = update.Message.From.ID
		} else {
			userID = update.CallbackQuery.From.ID
		}

		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ userStates ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
		if _, exists := userStates[userID]; !exists {
			userStates[userID] = &UserState{}
		}
		state := userStates[userID]

		if update.Message != nil {
			ProcessCommand(state, bot, update.Message)
		} else if update.CallbackQuery != nil {
			ProcessCallbackQuery(bot, update.CallbackQuery)
		}

		w.WriteHeader(http.StatusOK)
	}
}

func ProcessCommand(state *UserState, bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	cmd := msg.Text
	user := msg.From
	switch {
	case cmd == "/start":
		CheckUser(user)
		response := tgbotapi.NewMessage(msg.Chat.ID,
			"–ü—Ä–∏–≤–µ—Ç! üëã\n\n–Ø - —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—áü§ñ\n\n"+
				"–¢—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é\n\n"+
				"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
		response.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", "/create"),
				tgbotapi.NewInlineKeyboardButtonData("–°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∑–∞–¥–∞—á", "/list"),
			),
		)
		_, err := bot.Send(response)
		if err != nil {
			log.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", zap.Error(err))
		}
	case cmd == "/help":
		response := tgbotapi.NewMessage(msg.Chat.ID,
			"üìë –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"+
				"/create\n"+
				"/list\n")
		_, err := bot.Send(response)
		if err != nil {
			log.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", zap.Error(err))
		}
	case cmd == "/create" || state.Step != "":

		if userStates[user.ID].Step == "" {
			userStates[user.ID] = &UserState{Step: "waiting_for_title"}
		}
		ProcessCreate(userStates[user.ID], bot, msg)
	case cmd == "/list":
		tasks, err := db.GetUserTasks(user.ID)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
			return
		}

		if len(tasks) == 0 {
			bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á."))
			return
		}

		var responseText string
		for _, task := range tasks {
			responseText += fmt.Sprintf("üìå *%s*\n%s\n\n", task.Title, task.Description)
		}

		msg := tgbotapi.NewMessage(msg.Chat.ID, responseText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)

	default:
		response := tgbotapi.NewMessage(msg.Chat.ID,
			"‚õî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —è –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å")
		_, err := bot.Send(response)
		if err != nil {
			log.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", zap.Error(err))
		}
	}
}

func ProcessCallbackQuery(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	switch callback.Data {
	case "/create":
		CheckUser(callback.From)
		if userStates[callback.From.ID].Step == "" {
			userStates[callback.From.ID] = &UserState{Step: "waiting_for_title"}
		}
		ProcessCreate(userStates[callback.From.ID], bot, callback.Message)
	case "/list":
		tasks, err := db.GetUserTasks(callback.From.ID)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
			return
		}

		if len(tasks) == 0 {
			bot.Send(tgbotapi.NewMessage(callback.Message.Chat.ID, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á."))
			return
		}

		var responseText string
		for _, task := range tasks {
			responseText += fmt.Sprintf(
				"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: %s \n–û–ø–∏—Å–∞–Ω–∏–µ: %s\nüïí –í—Ä–µ–º—è: %s\n",
				task.Title,
				task.Description,
				task.DueDate.Format("02.01.2006 15:04"),
			)
		}

		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, responseText)
		bot.Send(msg)
	}
}

func ProcessCreate(state *UserState, bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	switch state.Step {
	case "waiting_for_title":
		state.Step = "waiting_for_description"
		response := tgbotapi.NewMessage(msg.Chat.ID, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
		_, err := bot.Send(response)
		if err != nil {
			log.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", zap.Error(err))
		}
	case "waiting_for_description":
		state.TempTask.Title = msg.Text
		state.Step = "waiting_for_date"
		response := tgbotapi.NewMessage(msg.Chat.ID, "üìå –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
		bot.Send(response)

	case "waiting_for_date":
		state.TempTask.Description = msg.Text
		state.Step = "waiting_for_setup"
		response := tgbotapi.NewMessage(msg.Chat.ID, "üì• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"+
			"–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"+
			"–ù–∞–ø—Ä–∏–º–µ—Ä: 10.04.2025 14:30")
		bot.Send(response)
	case "waiting_for_setup":
		layout := "02.01.2006 15:04"
		loc, _ := time.LoadLocation("Europe/Moscow")
		parsedTime, err := time.ParseInLocation(layout, msg.Text, loc)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑"))
			return
		} else if parsedTime.Before(time.Now()) {
			bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –±—É–¥—É—â–µ–µ"))
			return
		}
		reminderID, err := db.CreateTask(msg.From.ID, state.TempTask.Title, state.TempTask.Description, parsedTime)
		db.CreateRedisRecord(parsedTime, reminderID)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
			return
		}
		delete(userStates, msg.From.ID)
		response := tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
		bot.Send(response)
	}
}

func CheckUser(user *tgbotapi.User) {
	if d, err := db.CheckUserExistence(user.ID); err != nil {
		log.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
	} else if !d {
		if err := db.AddUser(user.ID, user.FirstName, user.LastName, user.UserName); err != nil {
			log.Error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", zap.Error(err))
		}
	} else {
		log.Info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å–≤—Ç—É–µ—Ç")
	}
}
